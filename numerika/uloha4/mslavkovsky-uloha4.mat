%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Pre ine funkcie si treba tieto 3 predefinovat
function ret = f(x)
	ret = 2 ^ x;
	%ret = sin(x);
	%ret = x^6;
end

% derivacia, v tomto pride derivacia 4 radu
function ret = df(x)
	ret = 2^x * log(2)^4 ; 
	%ret = sin(x);
	%ret = 360*x^2;
end

function ret = integral(x)
	ret = 2^x / log(2);
	%ret = -cos(x);
	%ret = x^7/7;
end

function ret = def_integral(a,b)
	ret = integral(b) - integral(a);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Poduloha A 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ret = find_df_max(a,b,d)
	% TOTO by sa dalo ovela rozumnejsie spravit, ale kaslat na to teraz
	ret = df(a);
	for x = a : d : b
		curr = abs(df(x));
		if ( curr > ret )
			ret = curr;
		end
	end
end

function ret = find_best_m(a,b,epsilon)
	max_df = find_df_max(a,b,0.01);
	% pre lichobeznikove pravidlo
	%ret = ((1/epsilon) * ( (b - a) * ((b - a)^2) * max_df * (1/12) ) ) ^ (0.5);
	
	% pre simpsonovo pravidlo
	ret = ((1/epsilon) * ( (b - a) * ((b - a)^4) * max_df * (1/2880) ) ) ^ (0.25);
	
	ret = round(ret);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Poduloha B 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ret = simpson_rule(a,b,m)
	h = (b - a) / m;
	x = [];
	for i = 0 : m
		x(end+1) = a + i*h;
	end

	ret = 0;
	for i = 1 : max(size(x)) - 1
		ret += f(x(i)) + 4*f((x(i)+ x(i+1)) / 2 ) + f(x(i+1));
		%ret += f(x(i)) + f(x(i+1));
 	end
 	%ret  *= h/2;
 	ret *= h/6;
end

%%%%%%%%%%%% Momentalne nepouzite, ale nechal som to tu %%%%%%%%%%%%

function ret = F(i,j,k,a,b)
	if j == 1
		ret = simpson_rule(a,b,2^(i-1));
	else
		ret = (F(i-1,j-1,k,a,b) - 2^(k+j-1) * F(i,j-1,k,a,b)) / (1 - 2^(k+j-1)) ; 
	end
end

function ret = richardson(n,k,a,b)
	ret = F(n,n,k,a,b);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Poduloha C
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ret = relative_error(y,yapx)
	round_factor = 1;
	ret = ( abs( y - yapx ) / y ) * round_factor;
	%ret
	%ret = round(ret) / round_factor;
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Hlavny beh programu
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
a = 1;
b = 5;
epsilon = 10^-2;


best_m = find_best_m(a,b,epsilon);
apx = simpson_rule(a,b,best_m);
exact = def_integral(a,b);
relative_error = relative_error(exact,apx);

printf('Najlepsie m 	   = %d \n' , best_m );
printf('Numericke riesenie = %f \n' , apx );
printf('Presne riesenie    = %f \n' , exact );
printf('Relativna chyba    = %0.10f %% \n' , relative_error );