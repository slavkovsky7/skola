% tu si treba zadat funkciu
function ret = f(x)
	ret = sin(x);
	%ret = x^3;
	%ret = x / (x + 1);
end

% tu jej derivaciu
function ret = df(x)
	ret = cos(x);
	%ret = 3 * x ^ 2 ;
	%ret = 1 / (x + 1)^2;
end


function ret = forward_diff(a,h)
	ret = (f(a+h) - f(a)) / h;
end

function ret = F(i,j,k,a,h)
	if j == 1
		ret = forward_diff(a,h / 2^(i-1));
	else
		ret = (F(i-1,j-1,k,a,h) - 2^(k+j-1) * F(i,j-1,k,a,h)) / (1 - 2^(k+j-1)) ; 
	end
	%printf('F[%d,%d] : 2^(%d) = %f \n', i,j, (k-1), 2^(k-1) );
	%printf('F[%d,%d] = %f \n', i,j, ret );
end


function ret = richardson(n,k,a,h)
	ret = F(n,n,k,a,h);
end

function [xret,yret] = dfVec(x0,x1,h)
	xret = [];
	yret = [];
	for x = x0 : h : x1 
		xret(end+1) = x;
		yret(end+1) = df(x);
	end
end

function [xret,yret] = numdfVec(x0,x1,h,n,k)
	xret = [];
	yret = [];
	for x = x0 : h : x1 
		xret(end+1) = x;
		yret(end+1) = richardson(n,k,x,h);
	end
end

% tu si treba zadat funkciu
function [xret,yret] = fvec(x0,x1, h)
	xret = [];
	yret = [];
	for x = x0 : h : x1 
		xret(end+1) = x;
		yret(end+1) = f(x);
	end
end

function ret = avg_relative_error(y1, y2)
	ret = 0;
	for i = 1 : size(y1,2)
		if ( abs(y2) > 0.0001 )
			ret = ret + abs( (y1(i) - y2(i)) / y1(i) );  
		end
	end
	ret = ret /  size(y1,2);
end

[xvec,yvec] = fvec(-10,10, 0.1 );
[xder1,yder1] = dfVec(-10,10, 0.1 );
% parameter 3 -> h, h/2, h/4
[xder2,yder2] = numdfVec(-10, 10, 0.1, 3, 0);

ax = [-10,+10,-5,5];

figure;
subplot(3,1,1);
plot( xvec, yvec ,'r');
axis(ax);
title('Funkcia')

subplot(3,1,2);
plot( xder1, yder1, 'g' );
axis(ax);
title('Klasicka derivacia')

subplot(3,1,3);
plot( xder2, yder2, 'b' );
axis(ax);
title('Numericka derivacia')


err = avg_relative_error(yder1, yder2);
printf('Average relative error = %f %% \n ', err * 100 ); 