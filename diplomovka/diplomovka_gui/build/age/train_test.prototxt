name: "AgeClassifier"
layer {
  name: "data"
  type: "Data"
  top: "data"
  data_param {
    backend: LMDB
    source: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_train_gt.lmdb/images"
    batch_size: 128
  }
  transform_param {
    #scale: 0.00390625
    #mirror: true
    mean_file: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_train_gt.lmdb/images_mean.binaryproto"
  }
  include: { phase: TRAIN }  
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  data_param {
    backend: LMDB
    source: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_valid_gt.lmdb/images"
    batch_size: 128
  }
  transform_param {
    #scale: 0.00390625
    #mirror: true
    mean_file: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_train_gt.lmdb/images_mean.binaryproto"
  }
  include: { phase: TEST }
}
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    backend: LMDB
    source: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_train_gt.lmdb/age_all"
    batch_size: 128
  }
  include: { phase: TRAIN }
}
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    backend: LMDB
    source: "/home/mslavkovsky/projects/image_tools/tasks/martin/age/data/train_test/all_labels_train_final_70x85_noEqalize_fold_0_valid_gt.lmdb/age_all"
    batch_size: 128
  }
  include: { phase: TEST }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 5
    stride: 2
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0.2
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 3
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "pool1"
  top: "pool1"
  dropout_param {
    dropout_ratio: 0.1
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 5
    stride: 2
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0.2
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 3
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "drop2"
  type: "Dropout"
  bottom: "pool2"
  top: "pool2"
  dropout_param {
    dropout_ratio: 0.2
  }
}

layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "pool2"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "gaussian"
      value: 0.05
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc8"
  top: "fc8"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc8"
  top: "fc8"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc9"
  type: "InnerProduct"
  bottom: "fc8"
  top: "fc9"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "gaussian"
      value: 0.05
    }
  }
}
layer {
  name: "sigmoid10"
  type: "Sigmoid"
  bottom: "fc9"
  top: "predict"
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "predict"
  bottom: "label"
  top: "loss"
}


